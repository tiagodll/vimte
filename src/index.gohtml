<html>
    <head>
        <title>vim game</title>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/styles/vs.min.css">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/firacode@6.2.0/distr/fira_code.css" />
        <link rel="stylesheet" href="/static/app.css" />

        <script src="/static/vimkeyboard.js"></script>
        <script src="/static/navigationHelper.js"></script>
        <script src="/static/normalMode.js"></script>
    </head>
</head>
<body>
    <script type="module">
      import hljs from 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/es/highlight.min.js';
      import lang from 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/es/languages/{{ .import_lang }}.min.js';
      hljs.registerLanguage('{{ .lang_code }}', lang);

      document.addEventListener('DOMContentLoaded', (event) => {
        document.querySelectorAll('pre.code').forEach((el) => {
          el.textContent = document.getElementById("codestring").innerText;
          hljs.highlightElement(el);
          document.getElementById("statusbar").innerText = `[${model.mode}] ${model.caret.line}:${model.caret.col} - ${code[model.caret.line].length}`;
        })
      })

      if ("virtualKeyboard" in navigator) {
        navigator.virtualKeyboard.overlaysContent = true;
      }

    </script>
    <div class="code-container">
        <pre id="codestring" class="codestring" style="display:none">{{ .code }}</pre>
        <pre class="code"></pre>
        <div id="cursor">_</div>
        <div id="target">_</div>
        <div id="counter">0</div>
        <div id="command"></div>
        <vim-keyboard mode="normal"></vim-keyboard>
    </div>
    <div id="statusbar"></div>
    <script type="text/javascript">
      let model = {
        counter: 0,
        mode: "normal",
        caret: {col: 0, line: 0},
        target: {col: 0, line: 0},
        partialKey: "",
        multiplier: "",
        getCaret(){ return {col: this.caret.col, line: this.caret.line}; },
        setCaret(pos){ this.caret.col = pos.col; this.caret.line = pos.line; },
      }
      const nonSpaceDelimiters = ['(', '[', '{', ')', ']', '}', '.', ',', ';']
      const delimiters = [...nonSpaceDelimiters, ' ', '']
      let code = document.getElementById("codestring").innerText.split("\n");
      normalMode = NewNormalMode(code);


      var i=0
      do{
        model.target.line = Math.floor(Math.random()*code.length);
        model.target.col = Math.floor(Math.random()*code[model.target.line].length);
      }while(i++<50 && code[model.caret.line].charAt(model.caret.col) == " ")
      setObjectPosition(document.getElementById("target"), model.target);

      window.addEventListener('keydown', (e) => {
        switch (e.code){
          case "Escape": setKeyboardMode('normal'); break;
          default:
            switch(model.mode){
              case 'normal': processKeyNormalMode(e.key);break;
              case 'visual': processKeyVisualMode(e.key);break;
              case 'insert': processKeyInsertMode(e.key);break;
            }
        }
        document.getElementById("statusbar").innerText = `[${model.mode}] ${model.caret.line}:${model.caret.col} - ${code[model.caret.line].length} - ${model.multiplier} ${model.partialKey} ${e.code} # ${model.counter}`;
      })

      function setKeyboardMode(mode){
        model.mode = mode;
        document.querySelector("vim-keyboard").setAttribute("mode", mode);
      }

      function processKeyNormalMode(key) {
        let c = document.getElementById('cursor');
        let pos = model.getCaret();
        let command = model.partialKey == null ? key : model.partialKey + key;
        let multiplier = 1;

        if(model.multiplier == "" && command == "0"){
          pos.col = 0;
          model.setCaret(pos);
          let uiCaret = {
            line: pos.line,
            col: (pos.col > code[pos.line].length) ? code[pos.line].length - 1 : pos.col
          };
          setObjectPosition(c, uiCaret);
          return;
        }

        if(/^\d+$/.test(command))
        {
          model.multiplier += command;
          document.querySelector("#command").innerHTML = model.multiplier;
          return;
        }else if(model.multiplier != ""){
          multiplier = parseInt(model.multiplier)
        }

        // pre commands:
        if(command == "g"){
            model.partialKey = command;
            return;
        }

        document.querySelector("#command").innerHTML = model.multiplier + command;

        for(i=0; i<multiplier; i++){
          switch(command){
            case "$": pos.col = code[pos.line].length; break;
            case "gg": pos.line = multiplier-1; model.partialKey = null; break

            case "h": pos = normalMode.moveLeft(pos);break;
            case "j": pos = normalMode.moveDown(pos);break;
            case "k": pos = normalMode.moveUp(pos);break;
            case "l": pos = normalMode.moveRight(pos);break;

            case "w": pos = normalMode.nextWord(pos); break;
            case "e": pos = normalMode.nextEndOfWord(pos); break;
            case "b": pos = normalMode.previousWord(pos); break;

            case "i": setKeyboardMode('insert'); break;
            case "v": setKeyboardMode('visual'); break;
          }
          if(pos.col < 0)
            pos.col = 0;
          if(pos.line >= code.length)
            pos.line = code.length-1;

          if(model.partialKey == null || model.partialKey == ""){
            model.counter++;
            document.getElementById('counter').innerText = model.counter;
          }

          model.setCaret(pos);
          let uiCaret = {
            line: pos.line,
            col: (pos.col > code[pos.line].length) ? code[pos.line].length - 1 : pos.col
          };
          setObjectPosition(c, uiCaret);
        }
        model.multiplier = "";

        if(model.caret.line == model.target.line && model.caret.col == model.target.col)
          alert(`you did it in ${model.counter} YAY!!!!`)
      }

      function setObjectPosition(target, pos){
        target.style.left = (pos.col * 1.23) + "ch";
        target.style.top = (pos.line * 1.2) + "rem";
      }
      function processKeyInsertMode(key) {
        // let pos = model.getCaret();

        // var cursorCol = pos.col < code[pos.line].length ? pos.col : code[pos.line].length - 1;
        // if(cursorCol < 0)
        //   cursorCol = 0;

        // c.style.left = (cursorCol * 1.23) + "ch";
        // c.style.top = (pos.line * 1.2) + "rem";
      }
      function processKeyVisualMode(key) {
        // let pos = model.getCaret();

        // var cursorCol = pos.col < code[pos.line].length ? pos.col : code[pos.line].length - 1;
        // if(cursorCol < 0)
        //   cursorCol = 0;

        // c.style.left = (cursorCol * 1.23) + "ch";
        // c.style.top = (pos.line * 1.2) + "rem";
      }
    </script>
</body>
</html>
